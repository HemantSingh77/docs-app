<?php

namespace Phalcon\Http\Message;

/**
 * Representation of an outgoing, server-side response.
 *
 * Per the HTTP specification, this interface includes properties for
 * each of the following:
 *
 * - Protocol version
 * - Status code and reason phrase
 * - Headers
 * - Message body
 *
 * Responses are considered immutable; all methods that might change state MUST
 * be implemented such that they retain the internal state of the current
 * message and return an instance that contains the changed state
 */
class Response implements \Psr\Http\Message\ResponseInterface
{
    /**
     * Gets the body of the message.
     *
     * @var <StreamInterface>
     */
    private $body;

    /**
     * @var array
     */
    private $headers = array();

    /**
     * Retrieves the HTTP protocol version as a string.
     *
     * The string MUST contain only the HTTP version number (e.g., "1.1", "1.0").
     *
     * @var string
     */
    private $protocolVersion = '1.1';

    /**
     * Gets the response reason phrase associated with the status code.
     *
     * Because a reason phrase is not a required element in a response
     * status line, the reason phrase value MAY be empty. Implementations MAY
     * choose to return the default RFC 7231 recommended reason phrase (or those
     * listed in the IANA HTTP Status Code Registry) for the response's
     * status code.
     *
     * @see http://tools.ietf.org/html/rfc7231#section-6
     * @see http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
     *
     * @var string
     */
    private $reasonPhrase = '';

    /**
     * Gets the response status code.
     *
     * The status code is a 3-digit integer result code of the server's attempt
     * to understand and satisfy the request.
     *
     * @var int
     */
    private $statusCode = 200;


    /**
     * Gets the body of the message.
     *
     * @return <StreamInterface>
     */
    public function getBody() {}

    /**
     * Retrieves the HTTP protocol version as a string.
     *
     * The string MUST contain only the HTTP version number (e.g., "1.1", "1.0").
     *
     * @return string
     */
    public function getProtocolVersion(): string {}

    /**
     * Gets the response reason phrase associated with the status code.
     *
     * Because a reason phrase is not a required element in a response
     * status line, the reason phrase value MAY be empty. Implementations MAY
     * choose to return the default RFC 7231 recommended reason phrase (or those
     * listed in the IANA HTTP Status Code Registry) for the response's
     * status code.
     *
     * @return string
     */
    public function getReasonPhrase(): string {}

    /**
     * Gets the response status code.
     *
     * The status code is a 3-digit integer result code of the server's attempt
     * to understand and satisfy the request.
     *
     * @return int
     */
    public function getStatusCode(): int {}

    /**
     * Constructor
     *
     * @param mixed $body
     * @param int $code
     * @param array $headers
     */
    public function __construct($body = 'php://memory', int $code = 200, array $headers = array()) {}

    /**
     * Retrieves a message header value by the given case-insensitive name.
     *
     * This method returns an array of all the header values of the given
     * case-insensitive header name.
     *
     * If the header does not appear in the message, this method MUST return an
     * empty array.
     *
     * @param mixed $name
     * @return array
     */
    public function getHeader($name): array {}

    /**
     * Retrieves a comma-separated string of the values for a single header.
     *
     * This method returns all of the header values of the given
     * case-insensitive header name as a string concatenated together using
     * a comma.
     *
     * NOTE: Not all header values may be appropriately represented using
     * comma concatenation. For such headers, use getHeader() instead
     * and supply your own delimiter when concatenating.
     *
     * If the header does not appear in the message, this method MUST return
     * an empty string.
     *
     * @param mixed $name
     * @return string
     */
    public function getHeaderLine($name): string {}

    /**
     * Retrieves all message header values.
     *
     * The keys represent the header name as it will be sent over the wire, and
     * each value is an array of strings associated with the header.
     *
     *     // Represent the headers as a string
     *     foreach ($message->getHeaders() as $name => $values) {
     *         echo $name . ': ' . implode(', ', $values);
     *     }
     *
     *     // Emit headers iteratively:
     *     foreach ($message->getHeaders() as $name => $values) {
     *         foreach ($values as $value) {
     *             header(sprintf('%s: %s', $name, $value), false);
     *         }
     *     }
     *
     * While header names are not case-sensitive, getHeaders() will preserve the
     * exact case in which headers were originally specified.
     *
     * @return array
     */
    public function getHeaders(): array {}

    /**
     * Checks if a header exists by the given case-insensitive name.
     *
     * @param mixed $name
     * @return bool
     */
    public function hasHeader($name): bool {}

    /**
     * Return an instance with the specified header appended with the given value.
     *
     * Existing values for the specified header will be maintained. The new
     * value(s) will be appended to the existing list. If the header did not
     * exist previously, it will be added.
     *
     * This method MUST be implemented in such a way as to retain the
     * immutability of the message, and MUST return an instance that has the
     * new header and/or value.
     *
     * @param mixed $name
     * @param mixed $value
     * @return Response
     */
    public function withAddedHeader($name, $value): Response {}

    /**
     * Return an instance with the specified message body.
     *
     * The body MUST be a StreamInterface object.
     *
     * This method MUST be implemented in such a way as to retain the
     * immutability of the message, and MUST return a new instance that has the
     * new body stream.
     *
     * @throws \InvalidArgumentException When the body is not valid.
     * @param \Psr\Http\Message\StreamInterface $body
     * @return Response
     */
    public function withBody(\Psr\Http\Message\StreamInterface $body): Response {}

    /**
     * Return an instance with the provided value replacing the specified header.
     *
     * While header names are case-insensitive, the casing of the header will
     * be preserved by this function, and returned from getHeaders().
     *
     * This method MUST be implemented in such a way as to retain the
     * immutability of the message, and MUST return an instance that has the
     * new and/or updated header and value.
     *
     * @throws \InvalidArgumentException for invalid header names or values.
     * @param mixed $name
     * @param mixed $value
     * @return Response
     */
    public function withHeader($name, $value): Response {}

    /**
     * Return an instance with the specified HTTP protocol version.
     *
     * The version string MUST contain only the HTTP version number (e.g.,
     * "1.1", "1.0").
     *
     * This method MUST be implemented in such a way as to retain the
     * immutability of the message, and MUST return an instance that has the
     * new protocol version.
     *
     * @param mixed $version
     * @return Response
     */
    public function withProtocolVersion($version): Response {}

    /**
     * Return an instance with the specified status code and, optionally, reason phrase.
     *
     * If no reason phrase is specified, implementations MAY choose to default
     * to the RFC 7231 or IANA recommended reason phrase for the response's
     * status code.
     *
     * This method MUST be implemented in such a way as to retain the
     * immutability of the message, and MUST return an instance that has the
     * updated status and reason phrase.
     *
     * @see http://tools.ietf.org/html/rfc7231#section-6
     * @see http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
     * @param mixed $code
     * @param mixed $reasonPhrase
     * @return Response
     */
    public function withStatus($code, $reasonPhrase = ''): Response {}

    /**
     * Return an instance without the specified header.
     *
     * Header resolution MUST be done without case-sensitivity.
     *
     * This method MUST be implemented in such a way as to retain the
     * immutability of the message, and MUST return an instance that removes
     * the named header.
     *
     * @param mixed $name
     * @return Response
     */
    public function withoutHeader($name): Response {}

    /**
     * Check the name of the header. Throw exception if not valid
     *
     * @see http://tools.ietf.org/html/rfc7230#section-3.2
     * @param mixed $name
     */
    private function checkHeaderName($name) {}

    /**
     * Validates a header value
     *
     * Most HTTP header field values are defined using common syntax
     * components (token, quoted-string, and comment) separated by
     * whitespace or specific delimiting characters.  Delimiters are chosen
     * from the set of US-ASCII visual characters not allowed in a token
     * (DQUOTE and "(),/:;<=>?@[\]{}").
     *
     *     token          = 1tchar
     *
     *     tchar          = "!" / "#" / "$" / "%" / "&" / "'" / ""
     *                    / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
     *                    / DIGIT / ALPHA
     *                    ; any VCHAR, except delimiters
     *
     * A string of text is parsed as a single value if it is quoted using
     * double-quote marks.
     *
     *     quoted-string  = DQUOTE( qdtext / quoted-pair ) DQUOTE
     *     qdtext         = HTAB / SP /%x21 / %x23-5B / %x5D-7E / obs-text
     *     obs-text       = %x80-FF
     *
     * Comments can be included in some HTTP header fields by surrounding
     * the comment text with parentheses.  Comments are only allowed in
     * fields containing "comment" as part of their field value definition.
     *
     *     comment        = "("( ctext / quoted-pair / comment ) ")"
     *     ctext          = HTAB / SP / %x21-27 / %x2A-5B / %x5D-7E / obs-text
     *
     * The backslash octet ("\") can be used as a single-octet quoting
     * mechanism within quoted-string and comment constructs.  Recipients
     * that process the value of a quoted-string MUST handle a quoted-pair
     * as if it were replaced by the octet following the backslash.
     *
     *     quoted-pair    = "\" ( HTAB / SP / VCHAR / obs-text )
     *
     * A sender SHOULD NOT generate a quoted-pair in a quoted-string except
     * where necessary to quote DQUOTE and backslash octets occurring within
     * that string.  A sender SHOULD NOT generate a quoted-pair in a comment
     * except where necessary to quote parentheses ["(" and ")"] and
     * backslash octets occurring within that comment.
     *
     * @param mixed $value
     */
    private function checkHeaderValue($value) {}

    /**
     * Checks the protocol
     *
     * @param mixed $protocol
     * @return Response
     */
    private function checkProtocol($protocol = ''): Response {}

    /**
     * Returns a new instance having set the parameter
     *
     * @param mixed $element
     * @param string $property
     * @return Response
     */
    private function cloneInstance($element, string $property): Response {}

    /**
     * Returns the header values checked for validity
     *
     * @param mixed $values
     * @return array
     */
    private function getHeaderValue($values): array {}

    /**
     * Returns the list of status codes available
     *
     * @return array
     */
    private function getPhrases(): array {}

    /**
     * Set a valid stream
     *
     * @param mixed $body
     * @param string $mode
     * @return \Psr\Http\Message\StreamInterface
     */
    private function processBody($body = 'php://memory', string $mode = 'r+b'): StreamInterface {}

    /**
     * Set a valid status code and phrase
     *
     * @param mixed $code
     * @param mixed $phrase
     */
    private function processCode($code, $phrase = '') {}

    /**
     * Sets the headers
     *
     * @param array $headers
     * @return Response
     */
    private function processHeaders(array $headers): Response {}

}
